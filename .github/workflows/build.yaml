name: build
on:
  workflow_call:
    inputs:
      docker-repo:
        required: true
        type: string
      java-version:
        required: false
        type: string
    secrets:
      sonar-token:
        required: true
jobs:
  ci:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: setup jdk ${{ inputs.docker-repo }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: ${{ inputs.java-version }}
      - name: maven build
        run: mvn clean install
      # - name: SonarQube Scan
      #   uses: sonarsource/sonarqube-scan-action@master
      #   env:
      #     SONAR_HOST_URL: 'http://localhost:9000/'
      #     SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
      - name: sonar scan
        run: mvn sonar:sonar -Dsonar.host.url=http://localhost:9000/ -Dsonar.token=${{ secrets.sonar-token }}
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
         SONAR_TOKEN: ${{ secrets.sonar-token }}
         SONAR_HOST_URL: 'http://localhost:9000/'
         scanMetadataReportFile: target/sonar/report-task.txt
  
      # Optionally you can use the output from the Quality Gate in another step.
      # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
      - name: "Example show SonarQube Quality Gate Status value"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
      - uses: actions/upload-artifact@v3
        with:
          name: my-artifact
          path: target/**
      - name: docker build
        run: docker buildx build -t ${{ inputs.docker-repo }}:$GITHUB_RUN_NUMBER .

  cd:
    runs-on: ubuntu-20.04
    needs: ci
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: my-artifact
      - name: deploy
        run: echo deploy

  qa-aut:
    runs-on: self-hosted
    needs: ci
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: 'Avinashreddi007/springboot-qa-aut'
          ref: 'fb-gha'
          path: 'workflows'
      - name: invoke-automation
        run: echo invoke qa automation scripts
